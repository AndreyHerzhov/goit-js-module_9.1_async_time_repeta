 
import '../css/common.css';

const refs = {
    startBtn: document.querySelector('button[data-action-start]'),
    stopBtn: document.querySelector('button[data-action-stop]'),
    clockFace: document.querySelector('.js-clockface')
}




class Timer {
    constructor({ onTick }) {
      this.intervalId = null;
      this.isActive = false;
      this.onTick = onTick;
  
      this.init();
    }
  
    init() {
      const time = this.getTimeComponents(0);
      this.onTick(time);
    }
  
    start() {
      if (this.isActive) {
        return;
      }
      
      const startTime = Date.now();
      this.isActive = true;
  
      this.intervalId = setInterval(() => {
        const currentTime = Date.now();
        const deltaTime = currentTime - startTime;
        const time = this.getTimeComponents(deltaTime);
  
        this.onTick(time);
      }, 1000);
    }
  
    stop() {
      clearInterval(this.intervalId);
      this.isActive = false;
      const time = this.getTimeComponents(0);
      this.onTick(time);
    }
    getTimeComponents(time) {
        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));
        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));
    
        return { hours, mins, secs };
      }
     pad(value) {
        return String(value).padStart(2,'0')
    }
}

const timer = new Timer({
    onTick: updateClockFace,
})


refs.startBtn.addEventListener('click', () => {
    timer.start()
})

refs.stopBtn.addEventListener('click', () => {
    timer.stop()
})

/*
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å—Ç—Ä–æ–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ 0 –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 2-—Ö –∑–Ω–∞–∫–æ–≤
 */

 


 /*
   * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
   * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ hours, mins, secs
   * - –ê–¥—Å–∫–∞—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞ —Å–æ —Å—Ç–µ–∫–∞ üí©
   */

  

  /*
 * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
 * - –†–∏—Å—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

  function updateClockFace({ hours, mins, secs }) {
      refs.clockFace.textContent = `${hours}:${mins}:${secs}`
  }